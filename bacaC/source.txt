// Karolina Kulas
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void AFR(int ***arr, int *rows, int **columns, int **rowSizes) {
  *arr = realloc(*arr, (*rows + 1) * sizeof(int *));
  int n, e;
  scanf("%i", &n);

  int **temp_arr = *arr;
  int *temp_columns = *columns;
  int *temp_rowSizes = *rowSizes;
  int i;
  for (i = *rows; i > 0; --i) {
    *(temp_arr + i) = *(temp_arr + i - 1);
    *(temp_columns + i) = *(temp_columns + i - 1);
    *(temp_rowSizes + i) = *(temp_rowSizes + i - 1);
  }
  *(*arr) = malloc(n * sizeof(int));
  for (i = 0; i < n; i++) {
    scanf("%i", &e);
    *(*(*arr)) = e;
    (*(*arr))++;
  }
  *(*arr) -= n;
  *(*rowSizes) = n;
  (*rows)++;
}

void ALR(int ***arr, int *rows, int **columns, int **rowSizes) {
  *arr = realloc(*arr, (*rows + 1) * sizeof(int *));
  int n, e;
  scanf("%i", &n);
  *(*arr + *rows) = malloc(n * sizeof(int));
  int i = 0;
  for (i = 0; i < n; i++) {
    scanf("%i", &e);
    *(*(*arr + *rows) + i) = e;
  }
  *(*rowSizes + *rows) = n;
  (*rows)++;
}

void AFC(int ***arr, int *rows, int **columns, int **rowSizes) {
  int h, e;
  scanf("%i", &h);
  int i, j;
  for (i = 0; i < h; ++i) {
    scanf("%i", &e);
    for (j = *(*rowSizes + i) - 1; j > 0; --j) {
      *(*(*arr + i) + j) = *(*(*arr + i) + j - 1);
    }
    *(*(*arr + i)) = e;
    (*(*rowSizes + i))++;
  }
}

void ALC(int ***arr, int *rows, int **columns, int **rowSizes) {
  int h, e;
  scanf("%i", &h);
  int i;
  for (i = 0; i < h; ++i) {
    scanf("%i", &e);
    *(*(*arr + i) + *(*rowSizes + i)) = e;
    (*(*rowSizes + i))++;
  }
}
void DFR(int ***arr, int *rows, int **columns, int **rowSizes) {
  int **temp_arr = *arr;
  int *temp_columns = *columns;
  int *temp_rowSizes = *rowSizes;
  int i = 0;
  for (i = 0; i < *rows - 1; i++) {
    *(temp_arr + i) = *(temp_arr + i + 1);
    *(temp_columns + i) = *(temp_columns + i + 1);
    *(temp_rowSizes + i) = *(temp_rowSizes + i + 1);
  }
  (*rows)--;
  *arr = realloc(*arr, (*rows) * sizeof(int *));
}

void DLR(int ***arr, int *rows, int **columns, int **rowSizes) {
  (*rows)--;
  *arr = realloc(*arr, (*rows) * sizeof(int *));
}

void DFC(int ***arr, int *rows, int **columns, int **rowSizes) {
  int i, j;
  for (i = 0; i < *rows; ++i) {
    if (*(*rowSizes + i) > 0) {
      for (j = 0; j < *(*rowSizes + i) - 1; ++j) {
        *(*(*arr + i) + j) = *(*(*arr + i) + j + 1);
      }
      (*(*rowSizes + i))--;
      free(*(*(*arr + i)));
    }
  } 
}

void DLC(int ***arr, int *rows, int **columns, int **rowSizes) {
  int i = 0;
  for (i = 0; i < *rows; ++i) {
    if (*(*rowSizes + i) > 0) {
      (*(*rowSizes + i))--;
      free(*(*(*arr + i)));
    }
  }
}

void IBR(int ***arr, int *rows, int **columns, int **rowSizes) {
  int n, e, r;
  scanf("%i%i", &r, &n);
  if (r >= 0 && r < *rows) {
    *arr = realloc(*arr, (*rows + 1) * sizeof(int *));
    int i;
    for (i = *rows; i > r; --i) {
      *(*(arr) + i) = *(*(arr) + i - 1);
      *(*(columns) + i) = *(*(columns) + i - 1);
      *(*(rowSizes) + i) = *(*(rowSizes) + i - 1);
    }
    *(*arr + r) = malloc(n * sizeof(int));
    for (i = 0; i < n; i++) {
      scanf("%i", &e);
      *(*(*arr + r) + i) = e;
    }
    *(*rowSizes + r) = n;
    (*rows)++;
  }
}

void IAR(int ***arr, int *rows, int **columns, int **rowSizes) {
  int n, e, r;
  scanf("%i%i", &r, &n);
  if (r >= 0 && r < *rows) {
    int i;
    *arr = realloc(*arr, (*rows + 1) * sizeof(int *));
    for (i = *rows; i > r + 1; --i) {
      *(*(arr) + i) = *(*(arr) + i - 1);
      *(*(columns) + i) = *(*(columns) + i - 1);
      *(*(rowSizes) + i) = *(*(rowSizes) + i - 1);
    }
    *(*arr + r) = malloc(n * sizeof(int));
    for (i = 0; i < n; i++) {
      scanf("%i", &e);
      *(*(*arr + r + 1) + i) = e;
    }
    *(*rowSizes + r + 1) = n;
    (*rows)++;
  }
}

void IBC(int ***arr, int *rows, int **columns, int **rowSizes) {
  int h, e, c;
  scanf("%i%i", &c, &h);
  int i, j;
  for (i = 0; i < h; ++i) {
    scanf("%i", &e);
    for (j = *(*rowSizes + i) - 1; j > c; --j) {
      *(*(*arr + i) + j) = *(*(*arr + i) + j - 1);
    }
    *(*(*arr + i) + c) = e;
    (*(*rowSizes + i))++;
  }
}

void IAC(int ***arr, int *rows, int **columns, int **rowSizes) {
  int h, e, c;
  scanf("%i%i", &c, &h);
  int i, j;
  for (i = 0; i < h; ++i) {
    scanf("%i", &e);
    for (j = *(*rowSizes + i) - 1; j > c + 1; --j) {
      *(*(*arr + i) + j) = *(*(*arr + i) + j - 1);
    }
    *(*(*arr + i) + c + 1) = e;
    (*(*rowSizes + i))++;
  }
}

void SWR(int ***arr, int *rows, int **columns, int **rowSizes) {
  int r, s, e, c;
  scanf("%i%i", &r, &s);
}
void SWC(int ***arr, int *rows, int **columns, int **rowSizes) {
  int r, s, d, c;
  scanf("%i%i", &c, &d);
}
void RMR(int ***arr, int *rows, int **columns, int **rowSizes) {
  int r, s, e, c;
  scanf("%i", &r);
}
void RMC(int ***arr, int *rows, int **columns, int **rowSizes) {

  int r, s, e, c;
  scanf("%i", &c);
}
void RMB(int ***arr, int *rows, int **columns, int **rowSizes) {
  int r, s, e, c, h, w;
  scanf("%i%i%i%i", &r, &h, &c, &w);
}
void ISB(int ***arr, int *rows, int **columns, int **rowSizes) {
  int r, s, e, c, h, w;
  scanf("%i%i%i%i", &r, &c, &h, &w);
  int i, j;
  for (i = 0; i < h; i++) {
    for (j = 0; j < w; j++)
      scanf("%i", &e);
  }
}
void conv(int *a) {
  unsigned short converted = 0;
  converted |= (*a << 8);
  converted |= (*a >> 8);
  *a = converted;
}
void conv2(int *a) {
  int converted = 0;
  converted |= ((0xff & *a) << 24);
  converted |= (((0xff << 8) & *a) << 8);
  converted |= (((0xff << 16) & *a) >> 8);
  converted |= (((0xff << 24) & *a) >> 24);
  *a = converted;
}
void WRF(int ***arr, int *rows, int **columns, int **rowSizes) {
  char *name = malloc(sizeof(char) * 17);
  scanf("%s", name);
}
void RDF(int ***arr, int *rows, int **columns, int **rowSizes) {
  char *name = malloc(sizeof(char) * 17);
  scanf("%s", name);
  FILE *plik = fopen(name, "rb");
  fscanf(plik, "%d\n", &rows);
  *arr = realloc(*rows, sizeof(int *));
  *rowSizes = realloc(*rows, sizeof(int));
  int i = 0;
  for (i = 0; i < *rows; i++) {
    fread(*(rowSizes + i), sizeof(unsigned short), 1, plik);
    conv(*(rowSizes + i));
    int kiwka = *(rowSizes + i);
    *rows = malloc(sizeof(int) * kiwka);
    int j;
    for (j = 0; j < *(rowSizes + i); j++) {
      fread(*(*(*arr + i) + j), sizeof(int), 1, plik);
      conv(*(*(*arr + i) + j));
    }
  }
  fclose(plik);
  free(name);
}
void PRT(int ***arr, int *rows, int **columns, int **rowSizes) {
  printf("%d\n", *rows);
  int i, j;
  for (i = 0; i < (*rows); i++) {
    printf("%d ", *(*rowSizes + *rows));
    for (j = 0; j < *(*rowSizes + *rows); j++)
      printf("%d ", *(*(*arr + i) + j));
    printf("\n");
  }
}
int main() {
  int **arr = NULL;
  int *rowSizes = NULL;
  int *rows = malloc(sizeof(int));
  int *columns = malloc(sizeof(int));
  *rows = 0;
  *columns = 0;
  char *code = malloc(sizeof(char));
  while (*code != 'E') {
    scanf("%c%c%c", code, code + 1, code + 2);
    if (*code == 'A') {
      if (*(code + 1) == 'F') {
        if (*(code + 2) == 'R') {
          AFR(&arr, rows, &columns, &rowSizes);
        }
        if (*(code + 2) == 'C') {
          AFC(&arr, rows, &columns, &rowSizes);
        }
      }
      if (*(code + 1) == 'L') {
        if (*(code + 2) == 'R') {
          ALR(&arr, rows, &columns, &rowSizes);
        }
        if (*(code + 2) == 'C') {
          ALC(&arr, rows, &columns, &rowSizes);
        }
      }
    }
    if (*(code) == 'I') {
      if (*(code + 1) == 'B') {
        if (*(code + 2) == 'R') {
          IBR(&arr, rows, &columns, &rowSizes);
        }
        if (*(code + 2) == 'C') {
          IBC(&arr, rows, &columns, &rowSizes);
        }
      }
      if (*(code + 1) == 'A') {
        if (*(code + 2) == 'R') {
          IAR(&arr, rows, &columns, &rowSizes);
        }
        if (*(code + 2) == 'C') {
          IAC(&arr, rows, &columns, &rowSizes);
        }
      }
      if (*(code + 1) == 'S') {
        ISB(&arr, rows, &columns, &rowSizes);
      }
    }
    if (*(code) == 'S') {
      if (*(code + 2) == 'R') {
        SWR(&arr, rows, &columns, &rowSizes);
      }
      if (*(code + 2) == 'C') {
        SWC(&arr, rows, &columns, &rowSizes);
      }
    }
    if (*(code) == 'D') {
      if (*(code + 1) == 'F') {
        if (*(code + 2) == 'R') {
          DFR(&arr, rows, &columns, &rowSizes);
        }
        if (*(code + 2) == 'C') {
          DFC(&arr, rows, &columns, &rowSizes);
        }
      }
      if (*(code + 1) == 'L') {
        if (*(code + 2) == 'R') {
          DLR(&arr, rows, &columns, &rowSizes);
        }
        if (*(code + 2) == 'C') {
          DLC(&arr, rows, &columns, &rowSizes);
        }
      }
    }
    if (*(code) == 'R') {
      if (*(code + 1) == 'M') {
        if (*(code + 2) == 'R') {
          RMR(&arr, rows, &columns, &rowSizes);
        }
        if (*(code + 2) == 'C') {
          RMC(&arr, rows, &columns, &rowSizes);
        }
        if (*(code + 2) == 'B') {
          RMB(&arr, rows, &columns, &rowSizes);
        }
      } else {
        RDF(&arr, rows, &columns, &rowSizes);
      }
    }
    if (*(code) == 'W') {
      WRF(&arr, rows, &columns, &rowSizes);
    }
    if (*(code) == 'P') {
      PRT(&arr, rows, &columns, &rowSizes);
    }
  }
  while (*rows > 0) {
    DFR(&arr, rows, &columns, &rowSizes);
  }
  free(arr);
  free(code);
  free(rows);
  free(columns);
  return 0;
}
